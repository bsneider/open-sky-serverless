---
name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-20.04
    environment: development
    timeout-minutes: 30

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_vault_addr: ${{ secrets.VAULT_ADDR }}
      TF_VAR_login_approle_role_id: ${{ secrets.LOGIN_APPROLE_ROLE_ID }}
      TF_VAR_login_approle_secret_id: ${{ secrets.LOGIN_APPROLE_SECRET_ID }}
      TF_VAR_secret_key_base: ${{ secrets.SECRET_KEY_BASE }}
      TF_VAR_region: ${{ secrets.REGION }}
      TF_VAR_domain: ${{ secrets.DOMAIN }}
      TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
      TF_VAR_database_username: ${{ secrets.DATABASE_USERNAME }}
      TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      TF_WORKSPACE: dev

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          cli_config_credentials_token: ${{ secrets.TF_API_USER_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_vault_addr: ${{ secrets.VAULT_ADDR }}
          TF_VAR_login_approle_role_id: ${{ secrets.LOGIN_APPROLE_ROLE_ID }}
          TF_VAR_login_approle_secret_id: ${{ secrets.LOGIN_APPROLE_SECRET_ID }}

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Exit after updating PR comments if plan failed
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
